// eudiw-job-board Prisma schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_CONNECTION_STRING")
}

enum ApplicationStatus {
  CREATED
  VERIFIED
  ISSUED
}

enum CredentialType {
  NONE
  PID
  DIPLOMA
  SEAFARER
  TAXRESIDENCY
}

model JobPosting {
  id           String        @id @default(cuid())
  title        String
  description  String
  requiredCredentials CredentialType @default(NONE)
  createdAt    DateTime      @default(now())
  applications Application[]
}

// prisma/schema.prisma
model Application {
  id           String   @id @default(cuid())
  jobId        String
  job          JobPosting @relation(fields: [jobId], references: [id])

  status       ApplicationStatus @default(CREATED)

  // Extracted from verified PID credential (for employee credential issuance)
  candidateFamilyName   String?
  candidateGivenName    String?
  candidateDateOfBirth  String?
  candidateNationality  String?
  candidateEmail        String?
  candidateMobilePhone  String?

  // Relations
  issuedCredentials     IssuedCredential[]
  verifiedCredentials   VerifiedCredential[]
  signedDocuments       SignedDocument[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([jobId])
}

// Stores credentials ready to be issued to wallets
model IssuedCredential {
  id                    String   @id @default(cuid())
  applicationId         String
  application           Application @relation(fields: [applicationId], references: [id])

  preAuthorizedCode     String   @unique
  credentialOfferUrl    String?  // The full credential offer URL
  otp                   String?  // PIN/OTP if required
  credentialType        String   // e.g., "eu.europa.ec.eudi.employee_mdoc"
  credentialData        Json     // The actual credential data (mDoc or SD-JWT)

  claimed               Boolean  @default(false)
  claimedAt             DateTime?
  expiresAt             DateTime

  createdAt             DateTime @default(now())

  @@index([applicationId])
  @@index([preAuthorizedCode])
}

// Stores verified credentials received from user's wallet
model VerifiedCredential {
  id                    String   @id @default(cuid())
  applicationId         String
  application           Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  credentialType        CredentialType // PID, DIPLOMA, SEAFARER
  namespace             String   // e.g., "eu.europa.ec.eudi.pid.1"

  verifierTransactionId String   // Transaction ID from verifier
  verifierRequestUri    String   // Deep link used in QR code

  credentialData        Json     // Extracted claims from the credential

  status                String   @default("PENDING") // PENDING, VERIFIED, FAILED
  verifiedAt            DateTime?

  createdAt             DateTime @default(now())

  @@index([applicationId])
  @@index([verifierTransactionId])
  @@index([applicationId, credentialType])
}

// Stores documents to be signed and their signing state
model SignedDocument {
  id                    String   @id @default(cuid())
  applicationId         String
  application           Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  // Document information
  documentHash          String   // SHA-256 hash of the document
  documentType          String   // e.g., "employment_contract"
  documentLabel         String   // Display name, e.g., "Contract.pdf"
  documentContent       Bytes?   // PDF bytes stored in database

  // Transaction state for signing flow
  state                 String   @unique  // UUID for this signing transaction
  nonce                 String   // Random UUID for replay protection

  // Signature data (populated after wallet callback)
  documentWithSignature Bytes?   // Signed document bytes
  signatureObject       String?  // Signature object as string (if provided separately)
  signatureQualifier    String?  // e.g., "eu_eidas_qes"
  signerCertificate     String?  // X.509 certificate from signer

  // Status tracking
  status                String   @default("PENDING") // PENDING, SIGNED, FAILED
  errorCode             String?  // Error code if signing failed
  signedAt              DateTime?

  createdAt             DateTime @default(now())

  @@index([applicationId])
  @@index([state])
  @@index([status])
}
